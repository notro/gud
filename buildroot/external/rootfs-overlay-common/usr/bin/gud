#!/bin/sh

# USB Display Gadget

VID=0x1d50
PID=0x614d

MANUFACTURER=
PRODUCT="GUD USB Display Gadget"
MAXPOWER=500 # mA
SERIALNUMBER=$(cat /proc/cpuinfo | grep ^Serial | cut -d":" -f2 | tr -d '[:space:]')

UDC=$(ls /sys/class/udc | cut -f1 | grep -v usbip | head -n1)

if grep -q 'drm_dev=' /proc/cmdline; then
	DRM_DEV=$(cat /proc/cmdline | xargs -n1 | grep 'drm_dev=' | cut -d'=' -f2)
else
	DRM_DEV=0
fi
if grep -q nocompression /proc/cmdline; then
	COMPRESSION=0
fi
if grep -q rgb565 /proc/cmdline; then
	# GUD_PIXEL_FORMAT_RGB565
	FORMATS="@"
fi
if grep -q 'connectors=' /proc/cmdline; then
	CONNECTORS=$(cat /proc/cmdline | xargs -n1 | grep 'connectors=' | cut -d'=' -f2)
fi

cd /sys/class/backlight/
for d in * ; do
	if [ -d "$d" ] && [ $(cat "$d/max_brightness") -gt 1 ]; then
		BACKLIGHT_DEV="$d"
		break
	fi
done

if [ -x /usr/bin/hidg-touch ]; then
	if grep -q 'touch_dev=no' /proc/cmdline; then
		TOUCH_DEV=
	elif grep -q 'touch_dev=' /proc/cmdline; then
		num=$(cat /proc/cmdline | xargs -n1 | grep 'touch_dev=' | cut -d'=' -f2)
		TOUCH_DEV="/dev/input/event$num"
	else
		TOUCH_DEV=$(/usr/bin/hidg-touch --find)
	fi
fi

if grep -q gcon /proc/cmdline; then
	GCON=yes
fi

. "/etc/default/gud"

start() {
	cd /sys/kernel/config/usb_gadget
	mkdir g1
	cd g1

	echo "$VID" > idVendor
	echo "$PID" > idProduct

	if [ -n "$GUD_VERSION_BCD" ]; then
		echo "$GUD_VERSION_BCD" > bcdDevice
	fi

	mkdir strings/0x409
	echo "$MANUFACTURER" > strings/0x409/manufacturer
	echo "$PRODUCT" > strings/0x409/product
	echo "$SERIALNUMBER" > strings/0x409/serialnumber

	mkdir configs/c.1
	echo "$MAXPOWER" > configs/c.1/MaxPower

	if [ "$GCON" = "yes" ]; then
		# Serial
		mkdir functions/acm.usb0
		ln -s functions/acm.usb0/ configs/c.1/
	fi

	if [ -n "$DRM_DEV" ]; then
		mkdir functions/gud.0
		echo "$DRM_DEV" > functions/gud.0/drm_dev
		if [ -n "$BACKLIGHT_DEV" ]; then
			echo "$BACKLIGHT_DEV" > functions/gud.0/backlight_dev
		fi
		if [ -n "$COMPRESSION" ]; then
			echo "$COMPRESSION" > functions/gud.0/compression
		fi
		if [ -n "$FORMATS" ]; then
			printf "$FORMATS" > functions/gud.0/formats
		fi
		if [ -n "$CONNECTORS" ]; then
			echo "$CONNECTORS" > functions/gud.0/connectors
		fi
		ln -s functions/gud.0/ configs/c.1/
	fi

	if [ -x /usr/bin/hidg-touch -a -n "$TOUCH_DEV" ]; then
		mkdir functions/hid.0
		echo 1 > functions/hid.0/protocol
		echo 1 > functions/hid.0/subclass
		/usr/bin/hidg-touch --length "$TOUCH_DEV" > functions/hid.0/report_length
		/usr/bin/hidg-touch --desc "$TOUCH_DEV" > functions/hid.0/report_desc

		ln -s functions/hid.0/ configs/c.1/
	fi

	echo "$UDC" > UDC
	status=$?

	if [ -x /usr/bin/hidg-touch -a -n "$TOUCH_DEV" ]; then
		/usr/bin/hidg-touch "$TOUCH_DEV" /dev/hidg0 &
	fi

	if [ "$UDC" = "usbip-vudc.0" ]; then
		/usr/sbin/usbipd -D --device --pid
	fi

	return "$status"
}

stop() {
	if [ -e /var/run/usbipd.pid ]; then
		start-stop-daemon -K -q -p /var/run/usbipd.pid
	fi

	cd /sys/kernel/config/usb_gadget
	if [ -d "g1" ]; then
		cd g1
		echo > UDC 2> /dev/null
		find configs/c.1/ -maxdepth 1 -type l -exec rm -f {} +
		rmdir configs/c.1

		if [ -e functions/hid.0 ]; then
			pkill -f hidg-touch
			rmdir functions/hid.0
		fi

		[ -e functions/gud.0 ] && rmdir functions/gud.0

		if [ -e functions/acm.usb0 ]; then
			# getty prevents the function from being removed so put rmdir
			# in the background and then kill getty.
			rmdir functions/acm.usb0 &
			sleep 0.1
			pkill -f ttyGS0
		fi

		rmdir strings/0x409
		cd ..
		rmdir g1
	fi
}

status() {
	cd /sys/kernel/config/usb_gadget
	if [ -d "g1" ]; then
		if [ -s "g1/UDC" ]; then
			echo "Running"
		else
			echo "Partially configured"
		fi
	else
		echo "Stopped"
	fi
}

debug() {
	cd /sys/kernel/config/usb_gadget
	if [ -d "g1" ]; then
		if [ -s "g1/UDC" ]; then
			if [ -e /var/run/usbipd.pid ]; then
				echo "Address:"
				ifconfig eth0 | grep "addr:"
				echo
				echo "Ports:"
				netstat -tln
				netstat -tn | grep tcp
			fi
		fi
		echo
		echo "Configuration:"
		find g1 -type f -exec printf '%s: ' {} \; -exec cat {} \;
	fi
}

case "$1" in
  start)
	start;;
  stop)
	stop;;
  restart|reload)
	stop
	sleep 1
	start
	;;
  status)
	status;;
  debug)
	debug;;
  *)
	echo "Usage: $0 {start|stop|restart|status|debug}"
	exit 1
esac

exit $?
